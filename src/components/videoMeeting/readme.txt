1.文件介绍
adapter.min.js
浏览器适配的一个库，webrtc.js中需要，可以通过npm安装webrtc-adapter，然后在webrtc.js导入import adapter from ‘webrtc-adapter ’
webrtc.js
封装webrtc和服务端交互逻辑，common.js中需要，如果使用vue需要export default Webrtcgw; 然后在common.js中导入
common.js
调用该js中的方法可实现入会和会议中的操作，ready()方法中的server表示指定连接哪个服务器，只需要更换IP就行
dmeo.js
示范如何调用common.js，如何打开摄像头和获取摄像头列表（该部分没有封装，就一句代码，需要根据具体业务逻辑显示）

需要注意的点
1.运行demo时，需要更换demo.js中的join方法中连接的服务器server（第一次运行demo时，连接服务器地址会报证书错误,可以通过先打开我这边原始的的webrtc网页，继续前往之后，这时会让证书暂时变成可靠，然后进行下面操作），建议不要直接打开index.html，可以安装http-server，运行http-server -p 8080，然后在浏览器中开http://127.0.0.1:8080，或者放到https的环境下运行，因为调用摄像头和麦克风需要在https环境或者是运行在本localhost和127.0.0.1上面才行，http由于安全原因无法调用摄像头麦克风，而且也需要同意允许使用摄像头和麦克风，允许使用之后才能正常获取摄像头麦克风扬声器的列表，否则调用失败，error则是浏览器返回的信息
2.如果预览过摄像头，进入到下一个页面则需要关闭摄像头，但是打开摄像头是一个异步的，可能还没有打开摄像头就进入下一个页面，导致摄像头并没有关闭
3.demo中为了方便，会议中会议外共用用了同一个设备列表，建议在会议中要切换摄像头麦克风时重新获取一下列表。获取麦克风扬声器列表时一个麦克风可能获取到多个，属于正常的。
4.调用joinMeeting函数后，后面所有信息都会通过回调函数返回，只需要更新状态，不需要做其他处理
5.对于媒体流来说，音频和视频是分开的，音频和视频都是融合流，因此webrtc不关心会议中的人数，其他人进入退出会议时，这边不需要做任何处理。点击加入会议后，回调函数会返回本地音频流，远端视频流，本地视频流，远端视频流，如果发送演示，则会返回本地演示流，远端演示流。对于发送方，本地演示流按需求是否显示，也会返回远端演示流（实际无流传输），不显示出来。对于接收方，会收到本地演示流（实际无流传输），不显示出来。远端演示流需要接受。
6.会议中开关麦克风，摄像头，扬声器，调用controlMic，controlCamera，controlSpeaker函数后，joinMeeting里的回调函数会返回是否成功设置，返回的结果中麦克风摄像头只需要更新状态，不需要做其他处理，扬声器除了更新状态，还需要设置muted属性。
7.关于设置中的值数据保存，js可以使用localStorage保存数据